openapi: "3.1.0"
info:
  title: "roomie API"
  description: "roomie API"
  version: "1.0.0"
servers:
- url: "https://roomie"
paths:
  /health:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "OK"
  /auth/login:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid credentials"
  /auth/logout:
    post:
      description: ""
      parameters:
      - name: "Authorization"
        in: "header"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Logged out successfully"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid token"
  /auth/register:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RegisterRequest"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /auth/unregister:
    delete:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/DeleteRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User unregistered successfully"
  /registration/additional-info:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/AdditionalInfoRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User additional data updated successfully"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Failed to update user additional data"
  /registration/additional-preferences:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/AdditionalPreferencesRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User preferences updated successfully"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Failed to update user preferences"
  /registration/available-departments:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_Faculty"
  /registration/available-hobbies:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  type: "string"
                  enum:
                  - "basketball"
                  - "football"
                  - "volleyball"
                  - "swimming"
                  - "running"
                  - "cycling"
                  - "hiking"
                  - "climbing"
                  - "skiing"
                  - "music"
                  - "dance"
                  - "cooking"
                  - "painting"
                  - "photography"
  /matches/notifications/{userId}:
    get:
      description: ""
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid user ID"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MatchResponse"
  /matches/swipe/{userId}/{swipedUserId}:
    post:
      description: ""
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
      - name: "swipedUserId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid user IDs"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "One or both users not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SwipeResponse"
  /user/{userId}:
    get:
      description: ""
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid user ID format"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not found"
  /users:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
components:
  schemas:
    LoginRequest:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
      required:
      - "email"
      - "password"
    AuthResponse:
      type: "object"
      properties:
        token:
          type: "string"
        userId:
          type: "integer"
          format: "int32"
      required:
      - "token"
      - "userId"
    RegisterRequest:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
      required:
      - "email"
      - "password"
    DeleteRequest:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
      required:
      - "userId"
    Info:
      type: "object"
      properties:
        fullName:
          type: "string"
        gender:
          type: "integer"
          format: "int32"
        age:
          type: "integer"
          format: "int32"
        description:
          type: "string"
        sleepSchedule:
          type: "string"
        hobbies:
          type: "array"
          items:
            type: "string"
            enum:
            - "basketball"
            - "football"
            - "volleyball"
            - "swimming"
            - "running"
            - "cycling"
            - "hiking"
            - "climbing"
            - "skiing"
            - "music"
            - "dance"
            - "cooking"
            - "painting"
            - "photography"
        smoke:
          type: "integer"
          format: "int32"
        drink:
          type: "integer"
          format: "int32"
        personalityType:
          type: "integer"
          format: "int32"
        yearOfStudy:
          type: "integer"
          format: "int32"
        faculty:
          type: "string"
          enum:
          - "WILiGZ"
          - "WIMiIP"
          - "WEAIIB"
          - "WIET"
          - "WIMiR"
          - "WGGiOS"
          - "WGGiIS"
          - "WIMiC"
          - "WO"
          - "WMN"
          - "WWNiG"
          - "WZ"
          - "WEiP"
          - "WFiIS"
          - "WMS"
          - "WH"
          - "WI"
          - "WTK"
        relationshipStatus:
          type: "integer"
          format: "int32"
      required:
      - "fullName"
      - "gender"
      - "age"
      - "description"
      - "sleepSchedule"
      - "hobbies"
      - "smoke"
      - "drink"
      - "personalityType"
      - "yearOfStudy"
      - "faculty"
    AdditionalInfoRequest:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        info:
          $ref: "#/components/schemas/Info"
      required:
      - "userId"
      - "info"
    Preferences:
      type: "object"
      properties:
        sleepScheduleMatters:
          type: "boolean"
        hobbiesMatters:
          type: "boolean"
        smokingImportance:
          type: "integer"
          format: "int32"
        drinkImportance:
          type: "integer"
          format: "int32"
        personalityTypeImportance:
          type: "integer"
          format: "int32"
        yearOfStudyMatters:
          type: "boolean"
        facultyMatters:
          type: "boolean"
        relationshipStatusImportance:
          type: "integer"
          format: "int32"
      required:
      - "sleepScheduleMatters"
      - "hobbiesMatters"
      - "yearOfStudyMatters"
      - "facultyMatters"
    AdditionalPreferencesRequest:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        preferences:
          $ref: "#/components/schemas/Preferences"
      required:
      - "userId"
      - "preferences"
    Map:
      type: "object"
      properties: {}
    Map_Faculty:
      type: "string"
    MatchResponse:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        fullName:
          type: "string"
      required:
      - "userId"
      - "fullName"
    SwipeResponse:
      type: "object"
      properties:
        message:
          type: "string"
      required:
      - "message"
    User:
      type: "object"
      properties:
        email:
          type: "string"
        info:
          $ref: "#/components/schemas/Info"
        preferences:
          $ref: "#/components/schemas/Preferences"
      required:
      - "email"
      - "info"
      - "preferences"